{"version":3,"sources":["ColorButton.js","Swatch.js","App.js","index.js"],"names":["RandomColorButton","className","onClick","this","props","React","Component","ColorSwatch","style","backgroundColor","name","toUpperCase","isLocked","App","state","colors","id","generateColors","bind","toggleLock","randomColors","map","color","index","Math","floor","random","toString","setState","newColors","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAWeA,E,uKANT,OACE,wBAAQC,UAAU,wBAAwBC,QAASC,KAAKC,MAAMF,QAA9D,kC,GAJwBG,IAAMC,WCYvBC,E,uKATP,OACI,sBAAKN,UAAU,qEAAqEO,MAAO,CAACC,gBAAiBN,KAAKC,MAAMM,MAAxH,UACI,6BAAKP,KAAKC,MAAMM,KAAKC,gBACrB,wBAAQV,UAAWE,KAAKC,MAAMQ,SAAW,eAAiB,uBAAwBV,QAASC,KAAKC,MAAMF,QAAtG,SAAgHC,KAAKC,MAAMQ,SAAW,SAAW,gB,GANvIP,IAAMC,WCyEjBO,E,kDApEX,WAAYT,GAAQ,IAAD,6BACf,cAAMA,IAUDU,MATc,CACfC,OAAQ,CACJ,CAACC,GAAI,EAAGN,KAAM,UAAWE,UAAU,GACnC,CAACI,GAAI,EAAGN,KAAM,UAAWE,UAAU,GACnC,CAACI,GAAI,EAAGN,KAAM,UAAWE,UAAU,GACnC,CAACI,GAAI,EAAGN,KAAM,UAAWE,UAAU,GACnC,CAACI,GAAI,EAAGN,KAAM,UAAWE,UAAU,KAI3C,EAAKK,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAbH,E,6DAmBf,IAAIE,EAAejB,KAAKW,MAAMC,OAAOM,KAAI,SAACC,EAAOC,GAC7C,OAAuB,IAAnBD,EAAMV,SACY,CACdI,GAAIO,EAAQ,EACZb,KAAM,IAAMc,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,IAC1Df,UAAU,GAIPU,KAIfnB,KAAKyB,SAAS,CACVb,OAAQK,M,iCAILJ,GACP,IAAIa,EAAY1B,KAAKW,MAAMC,OAAOM,KAAI,SAACC,EAAOC,GAC1C,OAAIP,IAAOO,EAAQ,EACR,CACHP,GAAIM,EAAMN,GACVN,KAAMY,EAAMZ,KACZE,UAAWU,EAAMV,UAGdU,KAIfnB,KAAKyB,SAAS,CACVb,OAAQc,M,+BAIN,IAAD,OAEL,OACI,gCACI,cAAC,EAAD,CAAmB3B,QAAS,WAAO,EAAKe,oBACxC,qBAAKhB,UAAU,eAAeO,MAAO,CAACsB,OAAQ,SAA9C,SACK3B,KAAKW,MAAMC,OAAOM,KAAK,SAAAC,GAAK,OAAI,cAAC,EAAD,CAAaZ,KAAMY,EAAMZ,KAAME,SAAUU,EAAMV,SAAUV,QAAS,WAAO,EAAKiB,WAAWG,EAAMN,mB,GA/DlIX,IAAMC,W,MCAxByB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b0f09cfa.chunk.js","sourcesContent":["import React from 'react';\n\nclass RandomColorButton extends React.Component {\n\n    render() {\n      return (\n        <button className=\"btn btn-secondary m-1\" onClick={this.props.onClick}>RANDOMIZE COLORS</button>\n      )\n    }\n}\n\nexport default RandomColorButton;","import React from 'react';\n\nclass ColorSwatch extends React.Component {\n\n    render() {\n        return (\n            <div className=\"w-100 d-flex flex-column align-items-center justify-content-center\" style={{backgroundColor: this.props.name}}>\n                <h2>{this.props.name.toUpperCase()}</h2>\n                <button className={this.props.isLocked ? 'btn btn-dark' : 'btn btn-outline-dark'} onClick={this.props.onClick}>{this.props.isLocked ? 'UNLOCK' : 'LOCK'}</button>\n            </div>\n        )\n    }\n}\n\nexport default ColorSwatch;","import React from 'react';\nimport RandomColorButton from \"./ColorButton\";\nimport ColorSwatch from './Swatch';\n\n\nclass App extends React.Component { \n    \n    constructor(props) {\n        super(props);\n        let initialState = {\n            colors: [\n                {id: 1, name: \"#54c06c\", isLocked: false},\n                {id: 2, name: \"#e4d623\", isLocked: false},\n                {id: 3, name: \"#b5453f\", isLocked: false},\n                {id: 4, name: \"#e8630c\", isLocked: false},\n                {id: 5, name: \"#5d1170\", isLocked: false}\n            ]\n        }\n        this.state = initialState;\n        this.generateColors = this.generateColors.bind(this);\n        this.toggleLock = this.toggleLock.bind(this);\n        \n    }\n\n    generateColors() {\n\n        let randomColors = this.state.colors.map((color, index) => {\n            if (color.isLocked === false) {\n                let newColorObj = {\n                    id: index + 1,\n                    name: '#' + Math.floor(Math.random() * 16777215).toString(16),\n                    isLocked: false\n                }\n                return newColorObj;\n            } else {\n                return color\n            }\n        })\n\n        this.setState({\n            colors: randomColors\n        });\n    }\n\n    toggleLock(id) {\n        let newColors = this.state.colors.map((color, index) => {\n            if (id === index + 1) {\n                return {\n                    id: color.id,\n                    name: color.name,\n                    isLocked: !color.isLocked\n                }\n            } else {\n                return color\n            }\n        })\n\n        this.setState({\n            colors: newColors\n        });\n    }\n    \n    render() {\n\n        return (\n            <div>\n                <RandomColorButton onClick={() => {this.generateColors()}} />\n                <div className=\"w-100 d-flex\" style={{height: \"100vh\"}}>\n                    {this.state.colors.map( color => <ColorSwatch name={color.name} isLocked={color.isLocked} onClick={() => {this.toggleLock(color.id)}}/> )}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}